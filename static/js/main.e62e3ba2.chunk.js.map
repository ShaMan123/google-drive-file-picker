{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","gapi.tsx"],"names":["process","CLIENT_ID","REACT_APP_GCP_CLIENT_ID","API_KEY","REACT_APP_GCP_DRIVE_PICKER_API_KEY","APP_ID","REACT_APP_GCP_PROJECT_ID","App","useFilePickerResults","results","openPicker","className","onClick","alt","src","style","whiteSpace","JSON","stringify","map","base64","mimeType","data","type","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SCOPES","DISCOVERY_DOCS","MIME_TYPES","gapiClient","loading","ready","accessToken","this","load","Promise","resolve","reject","window","addEventListener","script","createElement","async","onload","a","all","gapi","callback","error","client","init","immediate","ux_mode","apiKey","clientId","discoveryDocs","scope","join","onerror","head","appendChild","res","auth2","getAuthInstance","isSignedIn","get","listen","signedIn","signIn","currentUser","getAuthResponse","access_token","signOut","view","google","picker","View","ViewId","DOCS","setMimeTypes","PickerBuilder","enableFeature","Feature","NAV_HIDDEN","MULTISELECT_ENABLED","SUPPORT_DRIVES","setAppId","setOAuthToken","setOrigin","location","protocol","host","addView","setCallback","action","Action","PICKED","docs","file","downloadFile","id","files","build","setVisible","fileId","drive","Buffer","from","body","toString","useState","setResults","useCallback","openDriveFilePicker"],"mappings":"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","file":"static/js/main.e62e3ba2.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { useFilePickerResults } from \"./gapi\";\nimport \"./App.css\";\n\nconst { REACT_APP_GCP_CLIENT_ID: CLIENT_ID, REACT_APP_GCP_DRIVE_PICKER_API_KEY: API_KEY, REACT_APP_GCP_PROJECT_ID: APP_ID } = process.env;\n\nexport default function App() {\n  const [results, openPicker] = useFilePickerResults();\n\n  return (\n    <div className=\"App\">\n      <h1>Google Drive File Picker</h1>\n      <h2>\n        Before You begin Edit the <code>.env</code> File\n      </h2>\n      <button onClick={openPicker}>\n        <img\n          alt=\"google drive\"\n          src=\"https://fonts.gstatic.com/s/i/productlogos/drive_2020q4/v8/web-64dp/logo_drive_2020q4_color_2x_web_64dp.png\"\n        />\n      </button>\n      <br />\n      <br />\n      <br />\n      <h2>Enviroment Variables</h2>\n      <code style={{ whiteSpace: 'break-spaces' }}>\n        {JSON.stringify({ CLIENT_ID, API_KEY, APP_ID }, null, '\\t')}\n      </code>\n      <div>\n        {\n          results.map(({ base64, mimeType }) => {\n            if (mimeType === 'application/pdf') {\n              return <object data={base64} type={mimeType} width=\"100%\" />;\n            } else {\n              return <img src={base64} />;\n            }\n          })\n        }\n      </div>\n    </div>\n  )\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","//@ts-nocheck\r\n\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst { REACT_APP_GCP_CLIENT_ID: CLIENT_ID, REACT_APP_GCP_DRIVE_PICKER_API_KEY: API_KEY, REACT_APP_GCP_PROJECT_ID: APP_ID } = process.env;\r\n\r\n// Scope to use to access user's Drive items.\r\nconst SCOPES = [\r\n    'https://www.googleapis.com/auth/drive.file',\r\n    'https://www.googleapis.com/auth/drive.readonly'\r\n];\r\n\r\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\r\n\r\nconst MIME_TYPES = [\r\n    \"image/png\",\r\n    \"image/jpeg\",\r\n    \"image/jpg\",\r\n    \"application/pdf\"\r\n];\r\n\r\nclass Gapi {\r\n    loading: boolean = false;\r\n    ready: boolean = false;\r\n    private accessToken?: string;\r\n    constructor() {\r\n        this.load();\r\n    }\r\n    private async load() {\r\n        this.loading = true;\r\n        await new Promise((resolve, reject) => {\r\n            window.addEventListener('load', () => {\r\n                const script = document.createElement('script');\r\n                script.type = \"text/javascript\";\r\n                script.async = true;\r\n                script.src = `https://apis.google.com/js/api.js`;\r\n                script.onload = async () => {\r\n                    try {\r\n                        await Promise.all([\r\n                            new Promise((resolve, reject) => gapi.load('client:auth2', { callback: resolve, error: reject })),\r\n                            gapi.load('picker', '1')\r\n                        ]);\r\n                        await gapi.client.load('drive', 'v3');\r\n                        await gapi.client.init({\r\n                            immediate: false,\r\n                            ux_mode: 'redirect',\r\n                            apiKey: API_KEY,\r\n                            clientId: CLIENT_ID,\r\n                            discoveryDocs: DISCOVERY_DOCS,\r\n                            scope: SCOPES.join(' ')\r\n                        });\r\n                        resolve(true);\r\n                    } catch (error) {\r\n                        reject(error)\r\n                    }\r\n                };\r\n                script.onerror = reject;\r\n                document.head.appendChild(script);\r\n            });\r\n        });\r\n        this.loading = false;\r\n        this.ready = true;\r\n    }\r\n    async signIn() {\r\n        await new Promise((res) => {\r\n            const initialSignedIn = gapi.auth2.getAuthInstance().isSignedIn.get();\r\n            if (initialSignedIn) {\r\n                // the user is already signed in\r\n                res(true);\r\n            } else {\r\n                // watch the event\r\n                gapi.auth2.getAuthInstance().isSignedIn.listen((signedIn) => {\r\n                    if (signedIn) {\r\n                        res(true);\r\n                    }\r\n                });\r\n                gapi.auth2.getAuthInstance().signIn();\r\n            }\r\n        });\r\n        this.accessToken = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;\r\n    }\r\n    signOut() {\r\n        return gapi.auth2.getAuthInstance().signOut();\r\n    }\r\n    /**\r\n     * @returns https://developers.google.com/picker/docs/results\r\n     */\r\n    openDriveFilePicker() {\r\n        return new Promise<{ id: string, url: string, mimeType: string, base64: string }[]>(async (resolve, reject) => {\r\n            if (!this.ready) reject(\"gapi not ready\");\r\n            if (!this.accessToken) {\r\n                try {\r\n                    await this.signIn();\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n            }\r\n            const view = new google.picker.View(google.picker.ViewId.DOCS);//new google.picker.DocsView();\r\n            view.setMimeTypes(MIME_TYPES.join(','));\r\n            /*\r\n            const view = new google.picker.DocsView();\r\n            view.setEnableDrives(true);\r\n            view.setIncludeFolders(true);\r\n            */\r\n            const picker = new google.picker.PickerBuilder()\r\n                .enableFeature(google.picker.Feature.NAV_HIDDEN)\r\n                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)\r\n                .enableFeature(google.picker.Feature.SUPPORT_DRIVES)\r\n                .setAppId(APP_ID)\r\n                .setOAuthToken(this.accessToken)\r\n                .setOrigin(window.location.protocol + '//' + window.location.host)\r\n                .addView(view)\r\n                //.addView(new google.picker.DocsUploadView())\r\n                .setCallback(async (data: { action: string, docs: { id: string, url: string, mimeType: string }[] }) => {\r\n                    if (data.action === google.picker.Action.PICKED) {\r\n                        const files = await Promise.all(data.docs.map(async (file) => {\r\n                            const base64 = await this.downloadFile(file.id, file.mimeType);\r\n                            return { ...file, base64 };\r\n                        }));\r\n                        resolve(files);\r\n                    }\r\n                })\r\n                .build();\r\n            picker.setVisible(true);\r\n        });\r\n    }\r\n\r\n    async downloadFile(fileId: string, mimeType: string) {\r\n        const res = await gapi.client.drive.files.get({\r\n            fileId,\r\n            alt: 'media'\r\n        });\r\n        const base64 = 'data:' + mimeType + ';base64,' + Buffer.from(res.body, 'binary').toString('base64');\r\n        return base64;\r\n    }\r\n\r\n}\r\n\r\nconst gapiClient = new Gapi();\r\nexport default gapiClient;\r\n\r\nexport async function openFilePickerAndDisplayResults() {\r\n    const res = await gapiClient.openDriveFilePicker();\r\n    res.forEach(({ base64, mimeType }) => {\r\n        if (mimeType === 'application/pdf') {\r\n            const img = document.createElement('object');\r\n            img.data = base64;\r\n            img.type = mimeType;\r\n            img.width = '100%';\r\n            img.height = '100%';\r\n            document.body.appendChild(img);\r\n        } else {\r\n            const img = document.createElement('img');\r\n            img.src = base64;\r\n            document.body.appendChild(img);\r\n        }\r\n    })\r\n}\r\n\r\nexport function useFilePickerResults() {\r\n    const [results, setResults] = useState<{ id: string, url: string, mimeType: string, base64: string }[]>([]);\r\n    const openPicker = useCallback(async () => {\r\n        const res = await gapiClient.openDriveFilePicker();\r\n        setResults(res);\r\n    });\r\n    return [results, openPicker] as [typeof results, typeof openPicker];\r\n}"],"sourceRoot":""}